===== PROJECT STRUCTURE =====
.
├── db.sqlite3
├── login_required_project
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── main
│   ├── __init__.py
│   ├── forms.py
│   ├── models.py
│   ├── templates
│   │   └── main
│   │       ├── base.html
│   │       ├── home.html
│   │       ├── login.html
│   │       ├── register.html
│   │       ├── upload_image.html
│   │       └── user_panel.html
│   ├── urls.py
│   └── views.py
├── manage.py
├── project_dump.txt
└── script.sh

4 directories, 19 files


===== settings.py =====
from pathlib import Path
import os

BASE_DIR = Path(__file__).resolve().parent.parent

SECRET_KEY = 'django-insecure-testkey'

DEBUG = True

ALLOWED_HOSTS = []

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'login_required_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [ 
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'login_required_project.wsgi.application'

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

AUTH_PASSWORD_VALIDATORS = []

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_URL = '/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

===== project-level urls.py =====
from django.contrib import admin
from django.urls import path, include
from django.contrib.auth import views as auth_views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('main.urls')),
    path('login/', auth_views.LoginView.as_view(template_name='main/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(), name='logout'),
]


===== app-level urls.py =====
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from .views import home, register, upload_image
from main.views import home, upload_image, logout_view
from django.contrib.auth import views as auth_views
from django.contrib import admin
from . import views

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', home, name='home'),
    path('login/', auth_views.LoginView.as_view(template_name='main/login.html'), name='login'),
    path('logout/', logout_view, name='logout'),
    path('', home, name='home'),
    path('upload/', upload_image, name='upload_image'),
    path('register/', register, name='register'),
    path('delete/<int:image_id>/', views.delete_image, name='delete_image'),
    path('panel/', views.user_panel, name='user_panel'),
    path('change_password/', views.change_password, name='change_password'),
]

urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


===== models.py =====
from django.db import models
from django.contrib.auth.models import User
import uuid

class UserImage(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='images')
    name = models.CharField(max_length=100, unique=True)
    image = models.ImageField(upload_to='uploads/%Y/%m/%d/')

    def save(self, *args, **kwargs):
        if not self.name:
            self.name = f"{self.user.id}_{uuid.uuid4().hex}"

        super().save(*args, **kwargs)

    def __str__(self):
        return self.name


===== views.py =====
from django.contrib.auth.decorators import login_required
from django.contrib.auth.forms import UserCreationForm, PasswordChangeForm
from django.contrib.auth import login, logout, update_session_auth_hash
from django.shortcuts import render, redirect, get_object_or_404
from .forms import UserImageForm
from .models import UserImage

@login_required
def home(request):
    images = UserImage.objects.filter(user=request.user)
    selected = request.GET.get('selected')
    selected_image = images.filter(name=selected).first() if selected else None
    return render(request, 'main/home.html', {
        'images': images,
        'selected_image': selected_image,
    })

def register(request):
    if request.method == 'POST':
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('/')
    else:
        form = UserCreationForm()
    return render(request, 'main/register.html', {'form': form})

@login_required
def upload_image(request):
    if request.method == 'POST':
        form = UserImageForm(request.POST, request.FILES)
        if form.is_valid():
            user_image = form.save(commit=False)
            user_image.user = request.user
            user_image.save()
            return redirect('home')
    else:
        form = UserImageForm()
    return render(request, 'main/upload_image.html', {'form': form})


@login_required
def delete_image(request, image_id):
    image = get_object_or_404(UserImage, id=image_id, user=request.user)
    image.image.delete()  # Delete the actual image file
    image.delete()        # Delete the database record
    return redirect('home')  #

def logout_view(request):
    logout(request)
    return redirect('login')

@login_required
def user_panel(request):
    images = UserImage.objects.filter(user=request.user)
    if request.method == 'POST':
        # Handle image rename or update
        form = UserImageForm(request.POST, request.FILES)
        if form.is_valid():
            image = form.save(commit=False)
            image.user = request.user  # Ensure it's saved under the correct user
            image.save()
            return redirect('user_panel')
    else:
        form = UserImageForm()

    # Password change form
    password_form = PasswordChangeForm(user=request.user)
    
    return render(request, 'main/user_panel.html', {
        'images': images,
        'form': form,
        'password_form': password_form,
    })

@login_required
def change_password(request):
    if request.method == 'POST':
        password_form = PasswordChangeForm(user=request.user, data=request.POST)
        if password_form.is_valid():
            password_form.save()
            update_session_auth_hash(request, password_form.user)
            return redirect('user_panel')  # Redirect after password change
    else:
        password_form = PasswordChangeForm(user=request.user)
    
    return render(request, 'main/user_panel.html', {'password_form': password_form})

@login_required
def delete_image(request, image_id):
    image = get_object_or_404(UserImage, id=image_id, user=request.user)
    image.image.delete()  # Delete the actual image file
    image.delete()        # Delete the database record
    return redirect('user_panel')  # Redirect back to the user panel


===== forms.py =====
from django import forms
from .models import UserImage

class UserImageForm(forms.ModelForm):
    class Meta:
        model = UserImage
        fields = ['name', 'image']

    def clean_name(self):
        name = self.cleaned_data.get('name')
     
        if UserImage.objects.filter(user=self.instance.user, name=name).exists():
            raise forms.ValidationError("This image name is already taken by you. Please choose a different name.")
        return name


===== Template: base.html =====
{% load static %}


===== Template: home.html =====
<h2>Welcome, {{ user.username }}</h2>
<a href="{% url 'logout' %}">Logout</a>

<form method="get">
    <label>Select image:</label>
    <select name="selected" onchange="this.form.submit()">
        <option value="">-- choose an image --</option>
        {% for img in images %}
            <option value="{{ img.name }}" {% if selected_image and img.name == selected_image.name %}selected{% endif %}>
                {{ img.name }}
            </option>
        {% endfor %}
    </select>
</form>
<a href="{% url 'upload_image' %}">Upload a new image</a>


{% if selected_image %}
    <h3>Selected Image: {{ selected_image.name }}</h3>
    <img src="{{ selected_image.image.url }}" alt="{{ selected_image.name }}" width="400px" height="400px">
    <a href="{% url 'delete_image' selected_image.id %}">Delete image</a>
{% endif %}


===== Template: login.html =====
<!DOCTYPE html>
<html>
<head><title>Login</title></head>
<body>
  <h2>Login</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Login</button>
  </form>
  <p>Don't have an account? <a href="/register/">Register here</a></p>
</body>
</html>


===== Template: register.html =====
<!DOCTYPE html>
<html>
<head><title>Register</title></head>
<body>
  <h2>Register</h2>
  <form method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Register</button>
  </form>
  <p>Already have an account? <a href="/login/">Login here</a></p>
</body>
</html>


===== Template: upload_image.html =====
<!-- main/templates/main/upload_image.html -->
<h2>Upload a new image</h2>

<form method="POST" enctype="multipart/form-data">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Upload</button>
</form>

<a href="{% url 'home' %}">Back to homepage</a>


===== Template: user_panel.html =====
{% extends 'base.html' %}
{% block content %}
  <h2>Welcome, {{ user.username }}!</h2>

  <!-- User images section -->
  <h3>Your Uploaded Images</h3>
  <ul>
    {% for image in images %}
      <li>
        <img src="{{ image.image.url }}" width="100" height="100">
        <form action="{% url 'user_panel' %}" method="post" enctype="multipart/form-data">
          {% csrf_token %}
          {{ form.as_p }}
          <input type="hidden" name="image_id" value="{{ image.id }}">
          <button type="submit">Rename</button>
        </form>
        <a href="{% url 'delete_image' image.id %}">Delete</a>
      </li>
    {% endfor %}
  </ul>

  <h3>Change Your Password</h3>
  <form method="post" action="{% url 'change_password' %}">
    {% csrf_token %}
    {{ password_form.as_p }}
    <button type="submit">Change Password</button>
  </form>
{% endblock %}


===== base.html (if exists) =====
